import telebot
from telebot import types
import sqlite3
from config import *
import io

# –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
main_bot = telebot.TeleBot(MAIN_BOT_TOKEN, parse_mode='HTML')

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç
admin_bot = telebot.TeleBot(ADMIN_BOT_TOKEN, parse_mode='HTML')

#–ë–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫
feedback_bot = telebot.TeleBot(FEEDBACK_BOT_TOKEN, parse_mode='HTML')

class FeedbackBotHandler:
    def __init__(self, bot):
        self.bot = bot
        @bot.message_handler(commands=['start'])
        def send_welcome_main(message):
            if message.chat.id == ADMIN_ID:
                welcome_message = (
                    "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> üéâ\n\n"
                )
                self.bot.send_message(message.chat.id, welcome_message)
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

class FeedbackHandler:
    def __init__(self, bot):
        self.bot = bot
        self.user_fio = None
        self.user_phone = None
        self.complex_name = None

    def start_feedback(self, message, complex_name=None):
        self.complex_name = complex_name
        self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        self.bot.register_next_step_handler(message, self.get_fio)

    def get_fio(self, message):
        self.user_fio = message.text
        self.bot.send_message(message.chat.id, f'{self.user_fio}, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        self.bot.register_next_step_handler(message, self.get_phone)

    def get_phone(self, message):
        self.user_phone = message.text
        feeback_message = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n\n–§–ò–û: {self.user_fio}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {self.user_phone}\n\n–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å: {self.complex_name}"
        try:
            feedback_bot.send_message(ADMIN_ID, feeback_message)
        except Exception as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            self.bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂–∏–ª—ã–º–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞–º–∏
class ResidentialComplexHandler:
    def __init__(self, bot):
        self.bot = bot
        self.conn = sqlite3.connect('../data/tojsokhtmon.db', check_same_thread=False)
        self.current_complex_id = None
        self.complex_name = None
        self.complex_description = None
        self.current_apartment = {}

    def add_complex(self, message):
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞:")
        self.bot.register_next_step_handler(message, self.save_complex_name)

    def save_complex_name(self, message):
        self.complex_name = message.text
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞:")
        self.bot.register_next_step_handler(message, self.save_complex_description)

    def save_complex_description(self, message):
        self.complex_description = message.text
        self.bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞:")
        self.bot.register_next_step_handler(message, self.save_complex_photo)

    def save_complex_photo(self, message):
        if message.photo:
            file_id = message.photo[-1].file_id
            file_info = self.bot.get_file(file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)

            with self.conn:
                self.conn.execute('''
                    INSERT INTO residential_complex (name, description, photo)
                    VALUES (?, ?, ?)
                ''', (
                    self.complex_name, self.complex_description, sqlite3.Binary(downloaded_file)
                ))

            self.bot.send_message(message.chat.id, f"–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å '{self.complex_name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
            self.show_admin_menu(message)
        else:
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            self.bot.register_next_step_handler(message, self.save_complex_photo)

    def add_apartment(self, message):
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
        self.show_complex_list(message, callback=self.get_complex_id_for_apartment)

    def get_complex_id_for_apartment(self, message):
        complex_name = message.text
        cursor = self.conn.cursor()
        cursor.execute("SELECT id FROM residential_complex WHERE name = ?", (complex_name,))
        complex_id = cursor.fetchone()
        if complex_id:
            self.current_complex_id = complex_id[0]
            self.bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
            self.bot.register_next_step_handler(message, self.get_apartment_photo)
        else:
            self.bot.send_message(message.chat.id, "–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.add_apartment(message)

    def get_apartment_photo(self, message):
        if message.photo:
            self.current_apartment['photo'] = message.photo[-1].file_id
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:")
            self.bot.register_next_step_handler(message, self.get_apartment_rooms)
        else:
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏.")
            self.bot.register_next_step_handler(message, self.get_apartment_photo)

    def get_apartment_rooms(self, message):
        self.current_apartment['rooms'] = message.text
        self.bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫–≤–∞—Ä—Ç–∏—Ä–µ/–¥–æ–º—É:")
        self.bot.register_next_step_handler(message, self.get_apartment_description)

    def get_apartment_description(self, message):
        self.current_apartment['description'] = message.text
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—ã/–¥–æ–º–∞:")
        self.bot.register_next_step_handler(message, self.get_apartment_price)

    def get_apartment_price(self, message):
        self.current_apartment['price'] = message.text
        self.show_apartment_confirmation_menu(message)

    def show_apartment_confirmation_menu(self, message):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_save = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
        btn_cancel = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å')
        btn_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        keyboard.add(btn_save, btn_cancel, btn_back)
        self.bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        self.bot.register_next_step_handler(message, self.confirm_apartment_action)

    def confirm_apartment_action(self, message):
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å':
            self.save_apartment()
            self.bot.send_message(message.chat.id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            self.show_admin_menu(message)
        elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
            self.current_apartment.clear()
            self.bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            self.add_apartment(message)
        elif message.text == '–ù–∞–∑–∞–¥':
            self.show_admin_menu(message)

    def save_apartment(self):
        file_info = self.bot.get_file(self.current_apartment['photo'])
        downloaded_file = self.bot.download_file(file_info.file_path)
        with self.conn:
            self.conn.execute('''
                INSERT INTO apartments (photo, rooms, description, price, residential_complex_id)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                sqlite3.Binary(downloaded_file),
                self.current_apartment['rooms'],
                self.current_apartment['description'],
                self.current_apartment['price'],
                self.current_complex_id
            ))
        self.current_apartment.clear()

    def delete_apartment(self, message):
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
        self.show_complex_list(message, callback=self.get_complex_id_for_deletion)

    def get_complex_id_for_deletion(self, message):
        if message.text == '–ù–∞–∑–∞–¥':
            self.show_admin_menu(message)
            return
        complex_name = message.text
        cursor = self.conn.cursor()
        cursor.execute("SELECT id FROM residential_complex WHERE name = ?", (complex_name,))
        complex_id = cursor.fetchone()
        if complex_id:
            self.current_complex_id = complex_id[0]
            self.show_apartment_list_for_deletion(message)
        else:
            self.bot.send_message(message.chat.id, "–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.delete_apartment(message)

    def show_apartment_list_for_deletion(self, message):
        cursor = self.conn.cursor()
        cursor.execute("SELECT id, rooms FROM apartments WHERE residential_complex_id = ?", (self.current_complex_id,))
        apartments = cursor.fetchall()
        if not apartments:
            self.bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –≤ —ç—Ç–æ–º –∂–∏–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ.")
            self.show_admin_menu(message)
            return

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        room_map = {1: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è', 2: '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', 3: '–¢—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', 4: '–ß–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è'}
        for apartment_id, rooms in apartments:
            keyboard.add(types.KeyboardButton(room_map.get(rooms, f'{rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è')))
        keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))

        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        self.bot.register_next_step_handler(message, self.confirm_delete_apartment)

    def confirm_delete_apartment(self, message):
        room_map = {'–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 1, '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 2, '–¢—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 3, '–ß–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 4}
        rooms = room_map.get(message.text)
        if rooms:
            cursor = self.conn.cursor()
            cursor.execute("SELECT id FROM apartments WHERE residential_complex_id = ? AND rooms = ?", (self.current_complex_id, rooms))
            apartment_id = cursor.fetchone()
            if apartment_id:
                with self.conn:
                    self.conn.execute("DELETE FROM apartments WHERE id = ?", (apartment_id[0],))
                self.bot.send_message(message.chat.id, f"–ö–≤–∞—Ä—Ç–∏—Ä–∞ '{message.text}' —É–¥–∞–ª–µ–Ω–∞.")
                self.show_admin_menu(message)
            else:
                self.bot.send_message(message.chat.id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                self.show_apartment_list_for_deletion(message)
        elif message.text == '–ù–∞–∑–∞–¥':
            self.show_admin_menu(message)
        else:
            self.bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.show_apartment_list_for_deletion(message)

    def show_admin_menu(self, message):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn11 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å tojsokhtmon.tj', web_app=types.WebAppInfo(url="https://tojsokhtmon.tj/login"))
        btn1 = types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞')
        btn2 = types.KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞')
        btn3 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é')
        btn9 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π')
        btn4 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å')
        btn5 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å')
        btn6 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –∂–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã')
        btn7 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É')
        btn8 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É')
        btn10 = types.KeyboardButton('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)')
        keyboard.add(btn11)
        keyboard.add(btn1, btn2, btn3, btn9, btn4, btn5, btn6, btn7, btn8, btn10)

        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)

    def show_complex_list(self, message, callback=None):
        cursor = self.conn.cursor()
        cursor.execute("SELECT id, name FROM residential_complex")
        complexes = cursor.fetchall()
        if not complexes:
            self.bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤.")
            return

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        row = []
        for i, (complex_id, complex_name) in enumerate(complexes, start=1):
            row.append(types.KeyboardButton(complex_name))
            if i % 3 == 0:
                keyboard.row(*row)
                row = []
        if row:
            keyboard.row(*row)

        keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))

        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å:", reply_markup=keyboard)
        if callback:
            self.bot.register_next_step_handler(message, callback)

    def delete_complex(self, message):
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        self.bot.register_next_step_handler(message, self.confirm_delete_complex)

    def confirm_delete_complex(self, message):
        if message.text == '–ù–∞–∑–∞–¥':
            self.show_admin_menu(message)
            return

        complex_name = message.text
        cursor = self.conn.cursor()
        cursor.execute("SELECT id FROM residential_complex WHERE name = ?", (complex_name,))
        complex_id = cursor.fetchone()
        if complex_id:
            with self.conn:
                self.conn.execute("DELETE FROM residential_complex WHERE id = ?", (complex_id[0],))
            self.bot.send_message(message.chat.id, f"–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å '{complex_name}' —É–¥–∞–ª–µ–Ω.")
            self.show_admin_menu(message)
        else:
            self.bot.send_message(message.chat.id, "–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.delete_complex(message)

    def send_complex_info(self, chat_id, complex_id):
        cursor = self.conn.cursor()
        cursor.execute("SELECT name, description, photo FROM residential_complex WHERE id = ?", (complex_id,))
        complex_info = cursor.fetchone()
        if complex_info:
            name, description, photo = complex_info
            self.bot.send_photo(chat_id, photo, caption=f"<b>{name}</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}", parse_mode='HTML')

    def show_complex_menu(self, message, complex_id):
        self.current_complex_id = complex_id
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        options = ['–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É', '–ù–∞–∑–∞–¥']

        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä—è–¥–æ–≤
        row_width = 2
        keyboard.add(*[types.KeyboardButton(option) for option in options[:row_width]])
        keyboard.add(*[types.KeyboardButton(option) for option in options[row_width:2 * row_width]])
        keyboard.add(*[types.KeyboardButton(option) for option in options[2 * row_width:3 * row_width]])
        keyboard.add(*[types.KeyboardButton(option) for option in options[3 * row_width:4 * row_width]])
        keyboard.add(*[types.KeyboardButton(option) for option in options[4 * row_width:]])

        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
        self.bot.register_next_step_handler(message, self.handle_complex_menu_selection)

    def handle_complex_menu_selection(self, message):

        selected_option = message.text
        if selected_option == '–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É':
            self.show_apartment_selection_menu(message)
        elif selected_option == '–ù–∞–∑–∞–¥':
            self.show_admin_menu(message)
        else:
            self.bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.show_complex_menu(message, self.current_complex_id)

    def show_apartment_selection_menu(self, message):
        cursor = self.conn.cursor()
        cursor.execute("SELECT rooms FROM apartments WHERE residential_complex_id = ?", (self.current_complex_id,))
        apartments = cursor.fetchall()
        if not apartments:
            self.bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –≤ —ç—Ç–æ–º –∂–∏–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ.")
            self.show_complex_menu(message, self.current_complex_id)
            return

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        room_map = {1: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è', 2: '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', 3: '–¢—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', 4: '–ß–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è'}
        added_rooms = set()
        for rooms, in apartments:
            if rooms not in added_rooms:
                added_rooms.add(rooms)
                keyboard.add(types.KeyboardButton(room_map.get(rooms, f'{rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è')))
        keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))

        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã:", reply_markup=keyboard)
        self.bot.register_next_step_handler(message, self.handle_apartment_selection)

    def handle_apartment_selection(self, message):
        room_map = {'–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 1, '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 2, '–¢—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 3, '–ß–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 4}
        rooms = room_map.get(message.text)
        if rooms:
            cursor = self.conn.cursor()
            cursor.execute("SELECT photo, rooms, description, price FROM apartments WHERE residential_complex_id = ? AND rooms = ?", (self.current_complex_id, rooms))
            apartment = cursor.fetchone()
            if apartment:
                photo, rooms, description, price = apartment
                self.bot.send_photo(message.chat.id, photo, caption=f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {rooms}</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n<b>–¶–µ–Ω–∞ –æ—Ç: {price} —Å–æ–º–æ–Ω</b>", parse_mode='HTML')
                self.show_apartment_selection_menu(message)
            else:
                self.bot.send_message(message.chat.id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                self.show_apartment_selection_menu(message)
        elif message.text == '–ù–∞–∑–∞–¥':
            self.show_complex_menu(message, self.current_complex_id)
        else:
            self.bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.show_apartment_selection_menu(message)

class PromotionHandler:
    def __init__(self, bot, residential_complex_handler):
        self.bot = bot
        self.residential_complex_handler = residential_complex_handler
        self.conn = sqlite3.connect('../data/tojsokhtmon.db', check_same_thread=False)
        self.promotion_title = None
        self.promotion_photo = None
        self.promotion_description = None
        self.current_promotion_id = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–π –∞–∫—Ü–∏–∏

    def start_promotion_creation(self, message):
        self.bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
        self.bot.register_next_step_handler(message, self.get_promotion_title)

    def get_promotion_title(self, message):
        self.promotion_title = message.text
        self.bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫ –∞–∫—Ü–∏–∏ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ):")
        self.bot.register_next_step_handler(message, self.get_promotion_photo)

    def get_promotion_photo(self, message):
        if message.photo:
            file_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
            file_info = self.bot.get_file(file_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ

            try:
                downloaded_file = self.bot.download_file(file_info.file_path)  # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            except Exception as e:
                self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                return

            self.promotion_photo = sqlite3.Binary(downloaded_file)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∞–∫—Ü–∏–∏:")
            self.bot.register_next_step_handler(message, self.get_promotion_description)
        else:
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")
            self.bot.register_next_step_handler(message, self.get_promotion_photo)

    def get_promotion_description(self, message):
        self.promotion_description = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            with self.conn:
                self.conn.execute('''
                    INSERT INTO promotions (title, photo, description) VALUES (?, ?, ?)
                ''', (self.promotion_title, self.promotion_photo, self.promotion_description))
            self.bot.send_message(message.chat.id, "–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        except sqlite3.Error as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏: {e}")

    def show_promotion_list(self, message):
        if message.text == '–ù–∞–∑–∞–¥':
            self.residential_complex_handler.show_admin_menu(message)
            return
        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é':
            self.delete_promotion(message)
            return

        try:
            with self.conn:
                cursor = self.conn.cursor()
                cursor.execute("SELECT id, title FROM promotions")
                promotions = cursor.fetchall()
        except sqlite3.Error as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ü–∏–π: {e}")
            return

        if promotions:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            row = []
            for promo in promotions:
                row.append(types.KeyboardButton(promo[1]))
                if len(row) == 3:
                    markup.add(*row)
                    row = []
            if row:
                markup.add(*row)
            markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
            markup.add(types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é"))

            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é:", reply_markup=markup)
            self.bot.register_next_step_handler(message, self.process_selected_action)
        else:
            self.bot.send_message(message.chat.id, "–ê–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=types.ReplyKeyboardRemove())
            self.residential_complex_handler.show_admin_menu(message)

    def process_selected_action(self, message):
        if message.text == '–ù–∞–∑–∞–¥':
            self.residential_complex_handler.show_admin_menu(message)
        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é':
            self.delete_promotion(message)
        else:
            self.show_promotion_details(message)
            # –ü–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∞–∫—Ü–∏–∏ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π
            self.show_promotion_list(message)

    def show_promotion_details(self, message):
        try:
            with sqlite3.connect('../data/tojsokhtmon.db') as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT photo, description FROM promotions WHERE title = ?", (message.text,))
                promotion = cursor.fetchone()
        except sqlite3.Error as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–∏: {e}")
            return

        if promotion:
            photo, description = promotion
            if photo:
                photo_stream = io.BytesIO(photo)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Ç–æ–∫
                photo_stream.seek(0)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –ø–æ—Ç–æ–∫–∞

                self.bot.send_photo(message.chat.id, photo_stream, caption=f"{message.text}\n\n{description}")
            else:
                self.bot.send_message(message.chat.id, f"{message.text}\n\n{description}")
        else:
            self.bot.send_message(message.chat.id, "–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    def delete_promotion(self, message):
        if message.text == '–ù–∞–∑–∞–¥':
            self.show_promotion_list(message)
            return

        try:
            with self.conn:
                cursor = self.conn.cursor()
                cursor.execute("SELECT id, title FROM promotions")
                promotions = cursor.fetchall()

            if promotions:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for promo in promotions:
                    markup.add(types.KeyboardButton(promo[1]))  # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

                self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
                self.bot.register_next_step_handler(message, self.delete_selected_promotion)
            else:
                self.bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                      reply_markup=types.ReplyKeyboardRemove())
                self.residential_complex_handler.show_admin_menu(message)
        except sqlite3.Error as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ü–∏–π: {e}")

    def delete_selected_promotion(self, message):
        promotion_title = message.text
        try:
            with self.conn:
                cursor = self.conn.cursor()
                cursor.execute("DELETE FROM promotions WHERE title = ?", (promotion_title,))
                self.conn.commit()
            self.bot.send_message(message.chat.id, f"–ê–∫—Ü–∏—è '{promotion_title}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        except sqlite3.Error as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏: {e}")

        self.show_promotion_list(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π

class FAQHandler:
    def __init__(self, bot, residential_complex_handler):
        self.bot = bot
        self.conn = sqlite3.connect('../data/tojsokhtmon.db', check_same_thread=False)
        self.residential_complex_handler = residential_complex_handler
        self.current_faq_title = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ FAQ

    def show_faq_menu(self, message):
        cursor = self.conn.cursor()
        cursor.execute("SELECT id, title FROM faq")
        faqs = cursor.fetchall()

        if not faqs:
            markup = self._get_empty_faq_menu_markup()
            self.bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=markup)
            # return markup
            # self.bot.register_next_step_handler(message, self._get_empty_faq_menu_markup)
        else:
            markup = self._get_faq_menu_markup(faqs)
            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FAQ:", reply_markup=markup)
            self.bot.register_next_step_handler(message, self._handle_faq_menu_selection)

    def _get_empty_faq_menu_markup(self):
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å', '–ù–∞–∑–∞–¥')
        return markup

    def _get_faq_menu_markup(self, faqs):
        markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        for faq in faqs:
            markup.add(faq[1])  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å', '–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å', '–ù–∞–∑–∞–¥')
        return markup

    def _handle_faq_menu_selection(self, message):
        if message.text == '–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å':
            self.add_faq(message)
        elif message.text == '–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å':
            self.delete_faq(message)
        elif message.text == '–ù–∞–∑–∞–¥':
            self.handle_back(message)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ FAQ
            self.send_faq_details(message, message.text)

    def add_faq(self, message):
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
        self.bot.register_next_step_handler(message, self._save_faq_title)

    def _save_faq_title(self, message):
        self.current_faq_title = message.text
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
        self.bot.register_next_step_handler(message, self._save_faq_description)

    def _save_faq_description(self, message):
        faq_description = message.text
        cursor = self.conn.cursor()
        cursor.execute("INSERT INTO faq (title, description) VALUES (?, ?)", (self.current_faq_title, faq_description))
        self.conn.commit()
        self.bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.")
        self.show_faq_menu(message)

    def delete_faq(self, message):
        cursor = self.conn.cursor()
        cursor.execute("SELECT id, title FROM faq")
        faqs = cursor.fetchall()

        if not faqs:
            self.bot.send_message(message.chat.id, "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            self.show_faq_menu(message)
            return

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        for faq in faqs:
            markup.add(faq[1])  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        markup.add('–ù–∞–∑–∞–¥')
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        self.bot.register_next_step_handler(message, self._confirm_faq_deletion)

    def _confirm_faq_deletion(self, message):
        cursor = self.conn.cursor()
        cursor.execute("SELECT id FROM faq WHERE title = ?", (message.text,))
        faq_id = cursor.fetchone()
        if faq_id:
            cursor.execute("DELETE FROM faq WHERE id = ?", (faq_id[0],))
            self.conn.commit()
            self.bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω.")
        else:
            self.bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        self.show_faq_menu(message)

    def send_faq_details(self, message, faq_title):
        cursor = self.conn.cursor()
        cursor.execute("SELECT title, description FROM faq WHERE title = ?", (faq_title,))
        faq = cursor.fetchone()
        if faq:
            self.bot.send_message(message.chat.id, f"{faq[0]}\n\n{faq[1]}")
        else:
            self.bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        self.show_faq_menu(message)

    def handle_back(self, message):
        self.residential_complex_handler.show_admin_menu(message)

class AdminBotHandler:
    def __init__(self, bot):
        self.bot = bot
        self.residential_complex_handler = ResidentialComplexHandler(bot)
        self.promotion_handler = PromotionHandler(bot, self.residential_complex_handler)
        self.faq_handler = FAQHandler(bot, self.residential_complex_handler)
        self.main_bot_active = True

        @bot.message_handler(commands=['start'])
        def send_welcome(message):
            if message.chat.id == ADMIN_ID:
                self.residential_complex_handler.show_admin_menu(message)
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

        @bot.message_handler(func=lambda message: message.chat.id == ADMIN_ID)
        def handle_admin_commands(message):
            if message.text == '–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞':
                self.main_bot_active = True
                bot.send_message(message.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –≤–∫–ª—é—á–µ–Ω.")
            elif message.text == '–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞':
                self.main_bot_active = False
                bot.send_message(message.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")
            elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é':
                self.promotion_handler.start_promotion_creation(message)
            elif message.text == '–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π':
                self.promotion_handler.show_promotion_list(message)
            elif message.text == '–£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é':
                self.promotion_handler.delete_promotion(message)
            elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å':
                self.residential_complex_handler.add_complex(message)
            elif message.text == '–£–¥–∞–ª–∏—Ç—å –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å':
                self.residential_complex_handler.delete_complex(message)
            elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –∂–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã':
                self.residential_complex_handler.show_complex_list(message)
            elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É':
                self.residential_complex_handler.add_apartment(message)
            elif message.text == '–£–¥–∞–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É':
                self.residential_complex_handler.delete_apartment(message)
            elif message.text == '–ù–∞–∑–∞–¥':
                self.residential_complex_handler.show_admin_menu(message)
            elif message.text == '–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É':
                self.residential_complex_handler.show_apartment_selection_menu(message)
            elif message.text == '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)':
                self.faq_handler.show_faq_menu(message)
            elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å':
                self.faq_handler.add_faq(message)
            elif message.text == '–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å':
                self.faq_handler.delete_faq(message)
            else:
                cursor = self.residential_complex_handler.conn.cursor()
                cursor.execute("SELECT id FROM residential_complex WHERE name = ?", (message.text,))
                complex_id = cursor.fetchone()
                if complex_id:
                    self.residential_complex_handler.send_complex_info(message.chat.id, complex_id[0])
                    self.residential_complex_handler.show_complex_menu(message, complex_id[0])

class MainBotHandler:
    def __init__(self, bot, admin_bot_handler):
        self.bot = bot
        self.admin_bot_handler = admin_bot_handler
        self.feedback_handler = FeedbackHandler(bot)
        self.residential_complex_handler = ResidentialComplexHandler(bot)
        self.promotion_handler = PromotionHandler(bot, self.residential_complex_handler)
        self.current_complex_id = None
        self.current_selection_mode = None  # –£–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞: "complex" –∏–ª–∏ "apartment"

        @bot.message_handler(commands=['start'])
        def send_welcome_main(message):
            if self.admin_bot_handler.main_bot_active:
                self.show_main_menu(message.chat.id)
                welcome_message = (
                    "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> üéâ\n\n"
                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –ø–æ –ø–æ–¥–±–æ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä! üè†\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
                )
                self.bot.send_message(message.chat.id, welcome_message)
            else:
                self.bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")

        @bot.message_handler(
            func=lambda message: self.admin_bot_handler.main_bot_active and message.text == 'üìû –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')
        def handle_feedback_button(message):
            self.feedback_handler.start_feedback(message)

        @bot.message_handler(
            func=lambda message: self.admin_bot_handler.main_bot_active and message.text == 'üíº –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
        def handle_promotion_button(message):
            self.show_promotion_list(message)

        @bot.message_handler(
            func=lambda
                    message: self.admin_bot_handler.main_bot_active and message.text == '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)')
        def handle_faq_button(message):
            self.show_faq_menu(message)

        @bot.message_handler(func=lambda message: self.admin_bot_handler.main_bot_active and message.text == 'üè¢ –ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å')
        def handle_complex_button(message):
            self.show_complex_menu(message.chat.id)

        @bot.message_handler(func=lambda message: self.admin_bot_handler.main_bot_active and message.text == 'üè† –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É')
        def handle_select_apartment_button(message):
            self.current_selection_mode = 'apartment'
            self.show_complex_menu(message.chat.id)

        @bot.message_handler(func=lambda message: self.admin_bot_handler.main_bot_active and message.text == '–ù–∞–∑–∞–¥')
        def handle_back_button(message):
            self.current_selection_mode = None
            self.show_main_menu(message.chat.id)

        @bot.message_handler(func=lambda message: self.admin_bot_handler.main_bot_active and message.text in self.get_complex_names())
        def handle_complex_selection(message):
            complex_name = message.text
            complex_id = self.get_complex_id_by_name(complex_name)
            if complex_id:
                self.current_complex_id = complex_id
                if self.current_selection_mode == 'apartment':
                    self.show_apartment_selection_menu(message.chat.id)
                else:
                    self.residential_complex_handler.send_complex_info(message.chat.id, self.current_complex_id)
                    self.show_complex_details_menu(message.chat.id, self.current_complex_id)
            else:
                self.bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å.")

        @bot.message_handler(
            func=lambda message: self.admin_bot_handler.main_bot_active and message.text == '–í—ã–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É')
        def handle_complex_detail_select_apartments(message):
            self.show_apartment_selection_menu(message.chat.id)

        @bot.message_handler(
            func=lambda message: self.admin_bot_handler.main_bot_active and message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
        def handle_complex_detail_feedback(message):
            complex_name = self.get_complex_field_value(self.current_complex_id, 'name')
            self.feedback_handler.start_feedback(message, complex_name)

        @bot.message_handler(func=lambda message: self.admin_bot_handler.main_bot_active and message.text in ['–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '–¢—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '–ß–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è'])
        def handle_apartment_selection(message):
            if self.current_complex_id:
                room_map = {'–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 1, '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 2, '–¢—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 3, '–ß–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 4}
                rooms = room_map.get(message.text)
                if rooms:
                    apartment = self.get_apartment(self.current_complex_id, rooms)
                    if apartment:
                        photo, rooms, description, price = apartment
                        self.bot.send_photo(message.chat.id, photo, caption=f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {rooms}</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n<b>–¶–µ–Ω–∞ –æ—Ç: {price} —Å–æ–º–æ–Ω</b>", parse_mode='HTML')
                    else:
                        self.bot.send_message(message.chat.id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                elif message.text == '–ù–∞–∑–∞–¥':
                    self.show_main_menu(message.chat.id)
            else:
                self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å —Å–Ω–∞—á–∞–ª–∞.")

        @bot.message_handler(
            func=lambda message: self.admin_bot_handler.main_bot_active and message.text == '–í—ã–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ —Å–∞–π—Ç–µ')
        def handle_select_real_estate_button(message):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π WebApp
            keyboard = types.InlineKeyboardMarkup()
            webapp_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏",
                                                       web_app=types.WebAppInfo(url="https://tojsokhtmon.tj"))
            keyboard.add(webapp_button)
            self.bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ–¥–±–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ üëá",
                                  reply_markup=keyboard)

    def show_main_menu(self, chat_id):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üè¢ –ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å')
        btn2 = types.KeyboardButton('üè† –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É')
        btn3 = types.KeyboardButton('üèò –ü–æ–¥–æ–±—Ä–∞—Ç—å –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', web_app=types.WebAppInfo(url="https://tojsokhtmon.tj"))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        btn4 = types.KeyboardButton('üíº –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
        btn5 = types.KeyboardButton('üìû –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')
        btn6 = types.KeyboardButton('‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)')
        keyboard.add(btn1, btn2)
        keyboard.add(btn3, btn4)
        keyboard.add(btn5, btn6)
        # keyboard.add(btn4, btn5)
        # keyboard.add(btn6)
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"
        self.bot.send_message(chat_id, message, reply_markup=keyboard)

    def show_complex_menu(self, chat_id):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        complex_names = self.get_complex_names()
        if not complex_names:
            self.bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤.")
            self.show_main_menu(chat_id)
            return

        row = []
        for index, name in enumerate(complex_names):
            row.append(types.KeyboardButton(name))
            if (index + 1) % 3 == 0:
                keyboard.add(*row)
                row = []
        if row:
            keyboard.add(*row)
        keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å:", reply_markup=keyboard)

    def show_complex_details_menu(self, chat_id, complex_id):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É')
        btn2 = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
        btn3 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        keyboard.add(btn1, btn2, btn3)
        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    def show_apartment_selection_menu(self, chat_id):
        apartments = self.get_apartments_by_complex(self.current_complex_id)
        if not apartments:
            self.bot.send_message(chat_id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –≤ —ç—Ç–æ–º –∂–∏–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ.")
            self.show_complex_details_menu(chat_id, self.current_complex_id)
            return

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        room_map = {1: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è', 2: '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', 3: '–¢—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', 4: '–ß–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è'}
        for rooms, in apartments:
            keyboard.add(types.KeyboardButton(room_map.get(rooms, f'{rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è')))
        btn1 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        btn2 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ —Å–∞–π—Ç–µ')
        keyboard.add(btn1, btn2)

        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã:", reply_markup=keyboard)

    def get_complex_names(self):
        try:
            cursor = self.residential_complex_handler.conn.cursor()
            cursor.execute("SELECT name FROM residential_complex")
            return [name for (name,) in cursor.fetchall()]
        except Exception as e:
            self.bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤: {e}")
            return []

    def get_complex_id_by_name(self, name):
        try:
            cursor = self.residential_complex_handler.conn.cursor()
            cursor.execute("SELECT id FROM residential_complex WHERE name = ?", (name,))
            result = cursor.fetchone()
            return result[0] if result else None
        except Exception as e:
            self.bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞: {e}")
            return None

    def get_complex_field_value(self, complex_id, field):
        try:
            cursor = self.residential_complex_handler.conn.cursor()
            cursor.execute(f"SELECT {field} FROM residential_complex WHERE id = ?", (complex_id,))
            result = cursor.fetchone()
            return result[0] if result else None
        except Exception as e:
            self.bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è '{field}': {e}")
            return None

    def get_apartment(self, complex_id, rooms):
        try:
            cursor = self.residential_complex_handler.conn.cursor()
            cursor.execute("SELECT photo, rooms, description, price FROM apartments WHERE residential_complex_id = ? AND rooms = ?", (complex_id, rooms))
            return cursor.fetchone()
        except Exception as e:
            self.bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {e}")
            return None

    def get_apartments_by_complex(self, complex_id):
        try:
            cursor = self.residential_complex_handler.conn.cursor()
            cursor.execute("SELECT DISTINCT rooms FROM apartments WHERE residential_complex_id = ?", (complex_id,))
            return cursor.fetchall()
        except Exception as e:
            self.bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä: {e}")
            return []

    def show_promotion_list(self, message):
        if message.text == '–ù–∞–∑–∞–¥':
            self.show_main_menu(message)
            return

        try:
            with sqlite3.connect('../data/tojsokhtmon.db') as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT id, title FROM promotions")
                promotions = cursor.fetchall()
        except sqlite3.Error as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ü–∏–π: {e}")
            return

        if promotions:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            row = []
            for promo in promotions:
                row.append(types.KeyboardButton(promo[1]))
                if len(row) == 3:
                    markup.add(*row)
                    row = []
            if row:
                markup.add(*row)
            markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é:", reply_markup=markup)
            self.bot.register_next_step_handler(message, self.process_selected_action)
        else:
            self.bot.send_message(message.chat.id, "–ê–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=types.ReplyKeyboardRemove())
            self.show_main_menu(message.chat.id)

    def process_selected_action(self, message):
        if message.text == '–ù–∞–∑–∞–¥':
            self.show_main_menu(message.chat.id)
        else:
            self.promotion_handler.show_promotion_details(message)
            # –ü–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∞–∫—Ü–∏–∏ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π
            self.show_promotion_list(message)

    def show_faq_menu(self, message):
        try:
            with sqlite3.connect('../data/tojsokhtmon.db', check_same_thread=False) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT id, title FROM faq")
                faqs = cursor.fetchall()

            if not faqs:
                self.bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            else:
                markup = self._get_faq_menu_markup(faqs)
                self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FAQ:",
                                      reply_markup=markup)
                self.bot.register_next_step_handler(message, self._handle_faq_menu_selection)
        except sqlite3.Error as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FAQ: {e}")

    def _get_faq_menu_markup(self, faqs):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        row = []
        for faq in faqs:
            row.append(types.KeyboardButton(faq[1]))
            if len(row) == 3:
                markup.add(*row)
                row = []
        if row:
            markup.add(*row)
        markup.add('–ù–∞–∑–∞–¥')
        return markup

    def _handle_faq_menu_selection(self, message):
        if message.text == '–ù–∞–∑–∞–¥':
            self.show_main_menu(message.chat.id)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ FAQ
            self.send_faq_details(message, message.text)

    def send_faq_details(self, message, faq_title):
        try:
            with sqlite3.connect('../data/tojsokhtmon.db', check_same_thread=False) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT title, description FROM faq WHERE title = ?", (faq_title,))
                faq = cursor.fetchone()

            if faq:
                self.bot.send_message(message.chat.id, f"{faq[0]}\n\n{faq[1]}")
            else:
                self.bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é FAQ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π
            self.show_faq_menu(message)
        except sqlite3.Error as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π FAQ: {e}")


if __name__ == '__main__':
    admin_bot_handler = AdminBotHandler(admin_bot)
    main_bot_handler = MainBotHandler(main_bot, admin_bot_handler)
    feedback_bot_handler = FeedbackBotHandler(feedback_bot)
    from threading import Thread
    Thread(target=lambda: main_bot.polling(none_stop=True)).start()
    Thread(target=lambda: feedback_bot.polling(none_stop=True)).start()
    admin_bot.polling(none_stop=True)
